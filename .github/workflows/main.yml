name: Deploy to ECR
on: 
  push:
    branches: [ "main" ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build MySQL Docker Image
      run: |
        docker build -t my_db -f Dockerfile_mysql .

    - name: Run MySQL Container
      id: run-mysql
      run: |
        # Start the MySQL container
        docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=pw my_db
        echo "Waiting for MySQL to initialize..."
        sleep 30  # Adjust if necessary for MySQL to be ready

    - name: Get MySQL Container IP
      id: mysql-ip
      run: |
        MYSQL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql-container)
        echo "MYSQL_IP=${MYSQL_IP}" >> $GITHUB_ENV

    - name: Build Application Docker Image
      run: |
        docker build -t my_app -f Dockerfile .

    - name: Tag and Push Images to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: assignment1-dev-ecr
        IMAGE_TAG: v0.1
      run: |
        # Tag and push MySQL image to ECR
        docker tag my_db $ECR_REGISTRY/$ECR_REPOSITORY:my_db
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:my_db

        # Tag and push application image to ECR
        docker tag my_app $ECR_REGISTRY/$ECR_REPOSITORY:my_app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:my_app
